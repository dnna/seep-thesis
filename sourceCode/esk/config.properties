# Local database info
dbType = mysql
dbHost = 1.2.3.4
dbName = seep_internal
dbUser = seep
dbPass = zyx

# Eclass database info
eclassDbType = mysql
eclassDbHost = 1.2.3.4
eclassDbName = claroline
eclassDbUser = xyz
eclassDbPass = zyx

# Folder that contains the CLP files that will be used by the expert system
expertSystemFiles = expertSystemFiles

; Randomize the order of students to ensure fair registrations (don't use if you are planning to use an ORDER BY query to sort them in some other way)
randomizeStudentOrder = 0

; Query Customization
; Current semester query
currentSemesterQuery = SELECT MAX(semesterID) as curSemester FROM seep_env.semesters;
; Registration priorities (make sure they are ordered in ascending order)
registrationPrioritiesQuery = SELECT rpPrio, rpName, rpDatasource, rpParameters FROM registrationPriorities WHERE rpEnabled = 1 ORDER BY rpPrio;
; lessonID: The unique ID of a lesson (not a lab).
; labID: The unique ID of a specific lab.
; studAM: The unique ID of a student.
; regStudentQuery (studAM, lessonID, labID): Query that fetches all SUCCESSFUL registrations. +curSemester+ gets replaced with the current semester.
regStudentQuery = SELECT csl.studAM, csl.labID FROM seep_internal.curStudentLab csl;
; (eclass) labHoursQuery (labID, dayID, timeFrom, timeTo): Query that fetches the lab day, start time and end time from the eclass database. +curSemester+ gets replaced with the current semester.
;labHoursQuery = SELECT labID, dayID, timeFrom, timeTo FROM seep_env.program WHERE labID IS NOT NULL AND labID != 0 AND semesterID = +curSemester+;
; labInfoQuery(labID, lessonID, labSize, dayID, timeFrom, timeTo, [curSize]): Query that fetches lab information. [curSize] is optional.
; (eclass) labInfoQuery SELECT l.labID, l.lessonID, l.labSize, p.dayID, p.timeFrom, p.timeTo FROM seep_env.labs l, seep_env.program p WHERE l.labID = p.labID AND p.semesterID = +curSemester+;
;labInfoQuery = SELECT l.labID, l.lessonID, l.labSize, COUNT(csl.labID) curSize FROM seep_env.labs l LEFT JOIN seep_internal.curStudentLab csl ON csl.labID = l.labID GROUP BY l.labID;
; curSizeQuery(curSize): Required only if curSize isn't fetched in the labInfoQuery query. It works in a loop and +labID+ gets replaced with each lab's ID.
curSizeQuery = SELECT count(studAM) as curSize FROM seep_internal.curstudentLab WHERE labID = '+labID+';

; INSERT QUERIES
; Simulation mode: When set to 1 there will be no write queries
simulationMode = 0
; regStudentInsertQuery: Query to insert a registered student into the database. +labID+, +courseID+ and +AM+ are replaced with the registration's appropriate details. +lotID is replaced with the lottery's ID.
regStudentInsertQuery = REPLACE INTO curStudentLab (studAM, lotID, labID) VALUES (?, ?, ?);
; failedRegInsertQuery : Query to add a failed registration into the database. +courseID+ and +AM+ are replaced with the failed registration's appropriate details.
; IT IS POSSIBLE THAT THE DATA MAY ALREADY EXIST. USE REPLACE INSTEAD OF INSERT TO ENSURE THAT NO ERRORS HAPPEN.
failedRegLabInsertQuery = REPLACE INTO failedStudentLab (studAM, lotID, labID, failReason) VALUES (?, ?, ?, ?);
; failedRegInsertQuery : Query to add a failed registration into the database. +courseID+ and +AM+ are replaced with the failed registration's appropriate details.
; IT IS POSSIBLE THAT THE DATA MAY ALREADY EXIST. USE REPLACE INSTEAD OF INSERT TO ENSURE THAT NO ERRORS HAPPEN.
failedRegCourseInsertQuery = REPLACE INTO failedStudentCourse (studAM, lotID, courseID, failReason) VALUES (?, ?, ?, ?);
; updateExecutedQuery : Query that updates the lotExecuted status in the database. +lotID is replaced with the lottery's ID.
updateExecutedQuery = UPDATE lotteries SET lotExecuted = 1 WHERE lotID = ?;
; updateStatisticsPreferenceBreakdown: Query that updates the statisticsPreferenceBreakdown table with up to date statistics.
updateStatisticsPreferenceBreakdown = REPLACE INTO statisticsPreferenceBreakdown (Preference, lotID, successfulRegistrations, failedRegistrations, totalRegistrations) VALUES (?, ?, ?, ?, ?);

; DELETE QUERIES
; removeOldQuery: Removes the old student preferences
removeOldQuery = DELETE FROM studentPreferences;
; removeSameLotFailedCourse: Removes any failed registrations belong to the currently running lotID
removeSameLotFailedCourse = DELETE FROM failedstudentcourse WHERE lotID = ?;
; removeSameLotFailedCourse: Removes any failed registrations belong to the currently running lotID
removeSameLotFailedLab = DELETE FROM failedstudentlab WHERE lotID = ?;