<?php

/**
 * Ασχολείται με λειτουργίες ανάκτησης/αποθήκευσης δεδομένων σε χαμηλό επίπεδο.
 * Είναι singleton, δηλαδή μπορεί να υπάρχει μόνο ένα αντικείμενο αυτής της
 * κλάσης σε μια δεδομένη στιγμή, και μπορεί να ανακτηθεί με τη στατικη μέθοδο
 * get.
 * @author Dimosthenis Nikoudis <dnna@dnna.gr>
 */
abstract class DataHandler {

    /**
     * @var DataHandler $datahandler Το instance της κλάσης.
     */
    protected static $datahandler;

    /**
     * Αρχικοποιεί υπολογίζοντας το τρέχων εξάμηνο, δημιουργώντας σύνδεση με
     * την αποθήκη δεδομένων, αν αυτό χρειάζεται κ.τ.λ. Αν υπάρξει τεχνικό
     * πρόβλημα ρίχνει DataHandlerException με κωδικό 10001.
     * Είναι protected για να μην μπορεί να αρχικοποιηθεί εκτός κλάσης.
     */
    abstract protected function __construct();

    /**
     * Αυτή η στατική μέθοδος επιστρέφει το instance της κλάσης, ή το
     * δημιουργεί, αν αυτό δεν υπάρχει.
     * @return DataHandler Το instance της κλάσης.
     */
    public static function get() {
        global $config;
        $classname = $config['DataHandler'];
        if ($classname !== "DataHandler") {
            if (DataHandler::$datahandler == null) {
                DataHandler::$datahandler = new $classname;
            }
            return DataHandler::$datahandler;
        } else {
            throw new DataHandlerException('Επιχειρήθηκε να ανακτηθεί απευθείας η abstract κλάση DataHandler, αντί για κάποια επέκταση της.', 10002);
        }
    }

    /**
     * Επιχειρεί να αυθεντικοποιήσει τον χρήστη με το username και password που
     * δίνονται. Αν πετύχει τότε επιστρέφει έναν associative πίνακα με τα
     * διάφορα στοιχεία του χρήστη. Αν δεν πετύχει τότε επιστρέφει false. Σε
     * περίπτωση που υπάρξει τεχνικό πρόβλημα ρίχνει DataHandlerException με
     * κωδικό 10003.
     * @param String $username
     * @param String $password
     * @return mixed Επιστρέφει ένα associative array με πληροφορίες για τον
     * χρήστη αν αυθεντικοποιηθεί, ή boolean false αν αποτύχει.
     */
    abstract public function authenticateUser($username, $password);

    /**
     * Επιστρέφει τα ID και τα ονόματα των ημερών της εβδομάδας.
     * @return mixed Numeric array με τα ID και τα ονόματα των ημερών της
     * εβδομάδας. Χρησιμοποιείται για τη σύνθεση του ωρολογίου προγράμματος.
     */
    abstract public function getDays();

    /**
     * Επιστρέφει το τυπικό εξάμηνο του φοιτητή με τον δοθέντα αριθμό μητρώου.
     * @param String $AM Ο αριθμός μητρώου του φοιτητή.
     * @return int Το τυπικό εξάμηνο του φοιτητή.
     */
    abstract public function getTypicalSemester($AM);

    /**
     * Επιστρέφει ένα δισδιάστατο πίνακα με εργαστηριακά τμήματα και πληροφορίες
     * για αυτά, φιλτραρισμένα με βάση διάφορες παραμέτρους, οι οποίες μπορούν
     * να συνδυαστούν. Οι πληροφορίες που περιέχονται αφορούν τη θέση στο
     * ωρολόγιο πρόγραμμα, τον τύπο, το εξάμηνο στο οποίο διδάσκονται κ.τ.λ.
     * και είναι οι εξής:
     * <ol><li>NAME -> Όνομα του εργαστηριακού τμήματος.</li>
     * <li>DAY -> Το ID της ημέρας στην οποία διδάσκεται.</li>
     * <li>dayName -> Το όνομα της ημέρας στην οποία διδάσκεται.</li>
     * <li>tfrom -> Η ώρα έναρξης του εργαστηρίου.</li>
     * <li>tto -> Η ώρα λήξης του εργαστηρίου.</li>
     * <li>courseType -> Ο τύπος του μαθήματος (συνήθως "Εργαστήριο").</li>
     * <li>labID -> Ο μοναδικός κωδικός του εργαστηρίακού τμήματος.</li>
     * <li>courseID -> Ο μοναδικός κωδικός του μαθήματος στο οποίο ανήκει.</li>
     * <li>courseTaughtSemester -> Το εξάμηνο στο οποίο διδάσκεται.</li>
     * </ol>
     * @param String $AM Επιστροφή μόνο των τμημάτων στα οποία είναι γράμμενος ο
     * φοιτητής με αυτό τον αριθμό μητρώου. Αν είναι null τότε δεν υπάρχει
     * φιλτράρισμα με βάση τον αριθμό μητρώου.
     * @param String $courseID Επιστροφή μόνο των τμημάτων που ανήκουν στο
     * συγκεκριμένο μάθημα. Αν είναι null τότε δεν υπάρχει φιλτράρισμα με βάση
     * τον κωδικό μαθήματος.
     * @param int $courseTaughtSemester Επιστροφή μόνο των τμημάτων που ανήκουν
     * σε μάθημα που διδάσκονται στο συγκεκριμένο εξάμηνο. Αν είναι null τότε
     * δεν υπάρχει φιλτράρισμα με βάση το εξάμηνο.
     * @return mixed Δισδιάστατος πίνακας με εργαστηριακά τμήματα και
     * πληροφορίες που τα αφορούν. Η μια διάσταση είναι απλά ένα αριθμτικό
     * index, ενώ η άλλη είναι associative array με τις διάφορες πληροφορίες. Η
     * θέση με δείκτη numStudents περιέχει τον αριθμό των φοιτητών που έχουν
     * κληρωθεί σε αυτό το εργαστήριο, ή έχουν γραφτεί μόνιμα με κάποιον τρόπο.
     */
    abstract public function getLabs($AM = null, $courseID = null, $courseTaughtSemester = null);

    /**
     * Επιστρέφει ένα δισδιάστατο πίνακα με τις θεωρίες και πληροφορίες
     * για αυτές, φιλτραρισμένες με βάση διάφορες παραμέτρους, οι οποίες μπορούν
     * να συνδυαστούν. Οι πληροφορίες που περιέχονται αφορούν τη θέση στο
     * ωρολόγιο πρόγραμμα, τον τύπο, το εξάμηνο στο οποίο διδάσκονται κ.τ.λ.
     * και είναι οι εξής:
     * <ol><li>NAME -> Όνομα του μαθήματος.</li>
     * <li>DAY -> Το ID της ημέρας στην οποία διδάσκεται.</li>
     * <li>dayName -> Το όνομα της ημέρας στην οποία διδάσκεται.</li>
     * <li>tfrom -> Η ώρα έναρξης του εργαστηρίου.</li>
     * <li>tto -> Η ώρα λήξης του εργαστηρίου.</li>
     * <li>courseType -> Ο τύπος του μαθήματος (συνήθως "Θεωρία").</li>
     * <li>courseID -> Ο μοναδικός κωδικός του μαθήματος στο οποίο ανήκει.</li>
     * <li>courseTaughtSemester -> Το εξάμηνο στο οποίο διδάσκεται.</li>
     * </ol>
     * @param String $AM Επιστροφή μόνο των θεωριών στα οποία είναι γράμμενος ο
     * φοιτητής με αυτό τον αριθμό μητρώου. Αν είναι null τότε δεν υπάρχει
     * φιλτράρισμα με βάση τον αριθμό μητρώου.
     * @param String $courseID Επιστροφή μόνο των θεωριών που ανήκουν στο
     * συγκεκριμένο μάθημα. Αν είναι null τότε δεν υπάρχει φιλτράρισμα με βάση
     * τον κωδικό μαθήματος.
     * @param int $courseTaughtSemester Επιστροφή μόνο των θεωριών που
     * διδάσκονται στο συγκεκριμένο εξάμηνο. Αν είναι null τότε δεν υπάρχει
     * φιλτράρισμα με βάση το εξάμηνο.
     * @return mixed Δισδιάστατος πίνακας με θεωρίες και φροντιστήρια και
     * πληροφορίες που τα αφορούν. Η μια διάσταση είναι απλά ένα αριθμτικό
     * index, ενώ η άλλη είναι associative array με τις διάφορες πληροφορίες.
     */
    abstract public function getTheories($AM = null, $courseID = null, $courseTaughtSemester = null);

    /**
     * Επιστρέφει έναν πίνακα με IDs μαθημάτων και τα ονόματα τους.
     * @param String $AM Επιστροφή μόνο των μαθημάτων στα οποία είναι γράμμενος ο
     * φοιτητής με αυτό τον αριθμό μητρώου. Αν είναι null τότε δεν υπάρχει
     * φιλτράρισμα με βάση τον αριθμό μητρώου.
     * @param String $courseID Επιστροφή μόνο των μαθημάτων που ανήκουν στο
     * συγκεκριμένο μάθημα. Αν είναι null τότε δεν υπάρχει φιλτράρισμα με βάση
     * τον κωδικό μαθήματος.
     * @param int $courseTaughtSemester Επιστροφή μόνο των μαθημάτων που
     * διδάσκονται στο συγκεκριμένο εξάμηνο. Αν είναι null τότε δεν υπάρχει
     * φιλτράρισμα με βάση το εξάμηνο.
     * @param int $courseType Ο τύπος του μαθήματος που θέλουμε να ανακτήσουμε
     * (πχ. Θεωρία, Εργαστήριο). Δεν ισχύει αν το $AM δεν έχει οριστεί.
     * @return mixed Δισδιάστατος πίνακας με IDs μαθημάτων και ονόματα.
     * Η μια διάσταση είναι απλά ένα αριθμτικό index, ενώ η άλλη είναι
     * associative array με τα IDs και τα ονόματα. Στον δείτκη numLabs υπάρχει
     * ο αριθμός των εργαστηριακών τμημάτων που περιέχει το μάθημα.
     */
    abstract public function getLessonsWithInfo($AM = null, $courseID = null, $courseTaughtSemester = null, $courseType = 'Εργαστήριο');

    /**
     * Επιστρέφει έναν πίνακα με IDs μαθημάτων.
     * @param String $AM Επιστροφή μόνο των μαθημάτων στα οποία είναι γράμμενος ο
     * φοιτητής με αυτό τον αριθμό μητρώου. Αν είναι null τότε δεν υπάρχει
     * φιλτράρισμα με βάση τον αριθμό μητρώου.
     * @param String $courseID Επιστροφή μόνο των μαθημάτων που ανήκουν στο
     * συγκεκριμένο μάθημα. Αν είναι null τότε δεν υπάρχει φιλτράρισμα με βάση
     * τον κωδικό μαθήματος.
     * @param int $courseTaughtSemester Επιστροφή μόνο των μαθημάτων που
     * διδάσκονται στο συγκεκριμένο εξάμηνο. Αν είναι null τότε δεν υπάρχει
     * φιλτράρισμα με βάση το εξάμηνο.
     * @param int $courseType Ο τύπος του μαθήματος που θέλουμε να ανακτήσουμε
     * (πχ. Θεωρία, Εργαστήριο). Δεν ισχύει αν το $AM δεν έχει οριστεί.
     * @return array Μονοδιάστατος πίνακας με αριθμιτικούς δείκτες, που περιέχει
     * ένα ID μαθήματος σε κάθε θέση.
     */
    abstract public function getLessons($AM = null, $courseID = null, $courseTaughtSemester = null, $courseType = 'Εργαστήριο');

    /**
     * Επιστρέφει έναν πίνακα με τις προτιμήσεις του δοθέντα φοιτητή.
     * @param String $AM Ο αριθμός μητρώου του φοιτητή.
     * @return mixed Επιστρέφει ένα μονοδιάστατο associative array, με τα
     * ονόματα των δεικτών να είναι κωδικοί εργαστηριακών τμημάτων και τα
     * περιεχόμενα να είναι οι αντίστοιχες προτιμήσεις για αυτά τα τμήματα.
     */
    abstract public function getCurrentPreferences($AM);

    /**
     * Επιστρέφει για κάθε εργαστήριο τον αριθμό των φοιτητών που το έχουν
     * δηλώσει σαν πρώτη προτεραιότητα.
     * @return Επιστρέφει ένα associative array όπου τα index συμβολίζουν
     * κωδικούς εργαστηρίων και τα περιεχόμενα των αριθμό των φοιτητών που το
     * έχουν δηλώσει σαν πρώτη προτεραιότητα.
     */
    abstract public function getFirstPriorityCount();

    /**
     * Ενηερώνει την αποθήκη δεδομένων με τις αλλαγές που δίνονται από έναν
     * πίνακα αλλαγών. Αν υπάρξει σφάλμα στην ενημέρωση των προτιμήσεων τότε
     * ρίχνει DataHandlerException με κωδικό 10004.
     * @param String $AM Ο αριθμός μητρώου του φοιτητή για τον οποίο γίνεται η
     * ενημέρωση.
     * @param array $updatesArray Ο πίνακας ενημερώσεων. Είναι μονοδιάστατο
     * associative array με δείκτες τους κωδικούς των εργαστηριακών τμημάτων και
     * περιεχόμενα τις προτιμήσεις για τα αντίστοιχα τμήματα.
     */
    abstract public function updatePreferences($AM, $updatesArray);

    /**
     * Επιστρέφει τα ID και τις ημερομηνίες των κληρώσεων που είναι μέσα
     * στα πλαίσια της παραμέτρου. Επίσης επιστρέφει αν κάποια/ες από αυτές
     * είναι αυτή τη στιγμή σε εξέλιξη (δηλαδή τρέχει το σύστημα κληρώσεων για
     * αυτές).
     * @param String $context Δηλώνει ποιές κληρώσεις θέλουμε να εμφανίσουμε.
     * Μπορεί να έχει τις τιμές all, past (ή συνώνυμα το completed) ή future.
     * Επίσης μπορεί να χρησιμοποιηθεί η τιμή last που επιστρέφει μόνο την
     * πιο πρόσφατη ολοκληρωμένη κλήρωση.
     * @param int $lotID Μας επιτρέπει να φιλτράρουμε τα αποτελέσματα ώστε να
     * επιστρέφουν πληροφορίες μόνο για τη συγκεκριμένη κλήρωση με αυτό το
     * lotID. Χρήσιμο όταν θέλουμε να ανακτήσουμε πληροφορίες (πχ. ημ/νία) για
     * μια συγκεκριμένη κλήρωση όπου το lotID είναι γνωστό.
     * @return mixed Επιστρέφει δισδιάστατο πίνακα που περιέχει τα ID, τις
     * ημερομηνίες των κληρώσεων και το αν αυτές είναι αυτή τη στιγμή σε
     * εξέλιξη.
     */
    abstract public function getLotteries($context = 'all');

    /**
     * Ελέγχει αν υπάρχει κλήρωση σε εξέλιξη. Αν υπάρχει τότε επιστρέφει true,
     * αλλά δεν δίνει πληροφορία για το ποιά κλήρωση είναι αυτή.
     * @return boolean Επιστρέφει true αν υπάρχει κλήρωση σε εξέλιξη ή false
     * αν δεν υπάρχει.
     */
    abstract public function lotteryInProgress();

    /**
     * Επιστρέφει το ID της πιο πρόσφατης κλήρωσης. Όταν ανακτηθεί μια φορά
     * κρατιέται σε cache για την ελαχιστοποίηση των queries.
     * @return int Το ID της πιο πρόσφατης κλήρωσης.
     */
    abstract public function getLatestLotID();

    /**
     * Επιστρέφει τα τμήματα στα οποία κληρώθηκαν φοιτητές.
     * @param String $AM Επιστρέφει τα κληρωθέντα τμήματα μόνο για τον
     * φοιτητή με τον συγκεκριμένο αριθμό μητρώου. Αν είναι null τότε δεν
     * γίνεται φιλτράρισμα με βάση τον φοιτητή.
     * @param int $lotteryID Επιστρέφει τα κληρωθέντα τμήματα μόνο για την
     * συγκεκριμένη κλήρωση. Αν είναι null τότε δεν γίνεται φιλτράρισμα με βάση
     * την κλήρωση.
     * @param String $labID Επιστρέφει τους κληρωθέντες φοιτητές για το
     * συγκεκριμένο τμήμα. Αν είναι null τότε δεν γίνεται φιλτράρισμα με
     * βάση το τμήμα.
     * @return mixed Επιστρέφει έναν δισδιάστατο πίνακα όπου η μια διάσταση
     * είναι ένας αριθμιτικός δείκτης και η άλλη είναι associative array με
     * τον αριθμό μητρώου του φοιτητή (studAM), την ημερομηνία κλήρωσης
     * (lotDate), τον κωδικό του τμήματος (labID), την ώρα έναρξης και λήξης
     * (ttime) και το όνομα της ημέρας που διδάσκεται αυτό το εργαστήριο
     * (dayName).
     */
    abstract public function getAllocatedLabs($AM = null, $lotteryID = null, $labID = null);

    /**
     * Επιστρέφει τα τμήματα στα οποία δεν κατάφεραν να κληρωθούν φοιτητές.
     * Πρέπει να σημειωθεί ότι τα δεδομένα που επιστρέφονται από αυτή τη μέθοδο
     * λειτουργούν μόνο κατά την περίοδο των κληρώσεων, μετά το τέλος της οι
     * κληρωμένοι φοιτητές μετακινούνται στην κεντρική βάση για πιο μόνιμη
     * αποθήκευση. Αν η μέθοδος αυτή κληθεί σε άλλη περίοδο επιστρέφει έναν
     * άδειο πίνακα.
     * @param String $AM Επιστρέφει τα μη κληρωθέντα τμήματα μόνο για τον
     * φοιτητή με τον συγκεκριμένο αριθμό μητρώου. Αν είναι null τότε δεν
     * γίνεται φιλτράρισμα με βάση τον φοιτητή.
     * @param int $lotteryID Επιστρέφει τα μη κληρωθέντα τμήματα μόνο για την
     * συγκεκριμένη κλήρωση. Αν είναι null τότε δεν γίνεται φιλτράρισμα με βάση
     * την κλήρωση.
     * @param String $labID Επιστρέφει τους μη κληρωθέντες φοιτητές για το
     * συγκεκριμένο τμήμα. Αν είναι null τότε δεν γίνεται φιλτράρισμα με
     * βάση το τμήμα.
     * @return mixed Επιστρέφει έναν δισδιάστατο πίνακα όπου η μια διάσταση
     * είναι ένας αριθμιτικός δείκτης και η άλλη είναι associative array με
     * τον αριθμό μητρώου του φοιτητή (studAM), την ημερομηνία κλήρωσης
     * (lotDate), τον κωδικό του τμήματος (labID), την ώρα έναρξης και λήξης
     * (ttime) και το όνομα της ημέρας που διδάσκεται αυτό το εργαστήριο
     * (dayName).
     */
    abstract public function getFailedRegistrationsLabs($AM = null, $lotteryID = null, $labID = null);

    /**
     * Επιστρέφει τα μαθήματα στα οποία ο φοιτητής δεν κατάφερα να γραφτεί σε
     * κανένα τμήμα.
     * Πρέπει να σημειωθεί ότι τα δεδομένα που επιστρέφονται από αυτή τη μέθοδο
     * λειτουργούν μόνο κατά την περίοδο των κληρώσεων, μετά το τέλος της οι
     * κληρωμένοι φοιτητές μετακινούνται στην κεντρική βάση για πιο μόνιμη
     * αποθήκευση. Αν η μέθοδος αυτή κληθεί σε άλλη περίοδο επιστρέφει έναν
     * άδειο πίνακα.
     * @param String $AM Επιστρέφει τα μη κληρωθέντα μαθήματα μόνο για τον
     * φοιτητή με τον συγκεκριμένο αριθμό μητρώου. Αν είναι null τότε δεν
     * γίνεται φιλτράρισμα με βάση τον φοιτητή.
     * @param int $lotteryID Επιστρέφει τα μη κληρωθέντα μαθήματα μόνο για την
     * συγκεκριμένη κλήρωση. Αν είναι null τότε δεν γίνεται φιλτράρισμα με βάση
     * την κλήρωση.
     * @param String $courseID Επιστρέφει τους μη κληρωθέντες φοιτητές για το
     * συγκεκριμένο μάθημα. Αν είναι null τότε δεν γίνεται φιλτράρισμα με
     * βάση το μάθημα.
     * @return mixed Επιστρέφει έναν δισδιάστατο πίνακα όπου η μια διάσταση
     * είναι ένας αριθμιτικός δείκτης και η άλλη είναι associative array με
     * τον αριθμό μητρώου του φοιτητή (studAM), την ημερομηνία κλήρωσης
     * (lotDate), τον κωδικό του μαθήματος (courseID) και το όνομα του
     * μαθήματος (courseName).
     */
    abstract public function getFailedRegistrationsCourses($AM = null, $lotteryID = null, $courseID = null);

    /**
     * Επιστρέφει τα μαθήματα για τα οποία είναι υπεύθυνος ένας καθηγητής.
     * @param String $teacherID Το ID του καθηγητή για τον οποίο θα επιστραφούν
     * τα μαθήματα για τα οποία είναι υπεύθυνος.
     * @return mixed Επιστρέφει μονοδιάστατο πίνακα όπου κάθε θέση είναι ένα
     * courseID μαθήματος.
     */
    abstract public function getTeacherResponsibleCourses($teacherID);

    /**
     * Επιστρέφει πληροφορίες για έναν/περισσότερους καθηγητές
     * @param String $teacherID Το ID του καθηγητή για το οποίο θα επιστραφούν
     * πληροφορίες. Αν δεν ορίζεται τότε επιστρέφει για όλους.
     * @return mixed Δισδιάστατο associative array όπου το index της πρώτης
     * διάστασης είναι τα ID των καθηγητών και η δεύτερη περιέχει τις διάφορες
     * πληροφορίες.
     */
    abstract public function getTeacherDetails($teacherID = null);

    /**
     * Αλλάζει τις παραμέτρους ενός εργαστηριακού τμήματος.
     * @param mixed updatesArray Δισδιάστατος πίνακας όπου η μια διάσταση έχει
     * labID και η άλλη τα διάφορα πεδία που θα ενημερωθούν.
     * @return boolean Επιστρέφει true αν η ενημέρωση έγινε με επιτυχία ή false
     * αν υπήρξε κάποιο σφάλμα.
     */
    abstract public function updateLabParameters($updatesArray);

    /**
     * Διαγράφει τον φοιτητή από το συγκεκριμένο κληρωμένο εργαστήριο. Αν
     * υπάρξει τεχνικό πρόβλημα ρίχνει DataHandlerException με κωδικό 10005.
     * @param String $AM Ο αριθμός μητρώου του φοιτητή.
     * @param String $labID Ο κωδικός του εργαστηρίου.
     */
    abstract public function withdrawFromLab($AM, $labID);

    /**
     * Επιστρέφει έναν πίνακα με τους εγγεγραμένους φοιτητές σε ένα εργαστηριακό
     * τμήμα.
     * @param String $labID Ο κωδικός του εργαστηρίου.
     * @return mixed Επιστρέφει πίνακα με τα στοιχεία των εγγεγραμένων φοιτητών.
     */
    abstract public function getRegisteredStudents($labID);

    /**
     * Επιστρέφει τις προτεραιότητες εγγραφής φοιτητών.
     * @return mixed Επιστρέφει πίνακα με τις προτεραιότητες εγγραφής φοιτητών.
     */
    abstract public function getRegistrationPriorities();

    /**
     * Ενηερώνει την αποθήκη δεδομένων με τις αλλαγές που δίνονται από έναν
     * πίνακα αλλαγών. Αν υπάρξει σφάλμα στην ενημέρωση των προτεραιοτήτων τότε
     * ρίχνει DataHandlerException με κωδικό 10009.
     * @param array $updatesArray Δισδιάστατος πίνακας όπου η μια διάσταση έχει
     * prId και η άλλη τα διάφορα πεδία που θα ενημερωθούν.
     * @return boolean Επιστρέφει true αν η ενημέρωση έγινε με επιτυχία ή false
     * αν υπήρξε κάποιο σφάλμα.
     */
    abstract public function updateRegistrationPriorities($updatesArray);

    /**
     * Ενημερώνει την αποθήκη δεδομένων για τις αλλαγές στην κατάσταση των
     * κληρώσεων και δημιουργεί τα κατάλληλα scheduled tasks ή cron jobs. Οι
     * αλλαγές δίνονται από έναν πίνακα αλλαγών. Αν υπάρξει σφάλμα στην
     * ενημέρωση της κατάστασης κληρώσεων τότε ρίχνει DataHandlerException με
     * κωδικό 10010.
     * @param array $updatesArray Δισδιάστατος πίνακας όπου η μια διάσταση έχει
     * prId και η άλλη τα διάφορα πεδία που θα ενημερωθούν. Σε περίπτωση
     * προσθήκης το rpId αγνοείται.
     * @return boolean Επιστρέφει true αν η ενημέρωση έγινε με επιτυχία ή false
     * αν υπήρξε κάποιο σφάλμα.
     */
    abstract public function updateLotteries($updatesArray);

    /**
     * Γράφει έναν παλαιό φοιτητή στο τμήμα παλαιών.
     * @param String $studAM Ο αριθμός μητρώου του φοιτητή.
     * @param String $courseID Το μάθημα στο θέλει να εγγραφεί ως παλαιός
     * φοιτητής.
     * @return boolean Επιστρέφει true αν η ενημέρωση έγινε με επιτυχία ή false
     * αν υπήρξε κάποιο σφάλμα.
     */
    abstract public function registerOldStudent($studAM, $courseID);

    /**
     * Δημιουργεί και επιστρεφει έναν πίνακα που περιέχει στατιστικά στοιχεία
     * σχετικά με τα αποτελέσματα μιας κλήρωσης. Τα στατιστικά είναι χωρισμένα
     * ανα προτιμήση πχ. επιτυχείς και ανεπιτυχεις εγγραφές για την προτιμήση 1,
     * την 2 κτλ.
     * @param int $lotID Η κλήρωση για την οποία θα συλλεχθούν τα στατιστικά.
     * @return mixed Επιστρέφει τον πίνακα με τα στατιστικα ανα προτίμηση.
     */
    abstract public function getPreferenceBreakdownTable($lotID);

    /**
     * Δημιουργεί και επιστρεφει έναν πίνακα που περιέχει στατιστικά στοιχεία
     * σχετικά με τους σπουδαστές που δεν γραφτηκαν σε κανένα εργαστηριακό
     * τμήμα σε τουλάχιστον ένα μάθημα.
     * @param int $lotID Η κλήρωση για την οποία θα συλλεχθούν τα στατιστικά.
     * @return mixed Επιστρέφει τον πίνακα με τους σπουδαστές που δεν γραφτηκαν.
     */
    abstract public function getFailedCourseBreakdownTable($lotID);

    /**
     * Επιστρέφει τα στοιχεία των σπουδαστών που δεν γράφτηκαν σε κανένα
     * εργαστηριακό τμήμα ενός μαθήματος.
     * @param int $lotID Η κλήρωση στην οποία οι σπουδαστες δεν γράφτηκαν.
     * @param Array $courseID Επιστρέφει έναν πίνακα με τους σπουδαστές που δεν
     * γράφτηκαν.
     */
    abstract public function getFailedCourseStudent($lotID, $courseID);

    /**
     * Δημιουργεί και επιστρεφει έναν πίνακα που περιέχει στατιστικά στοιχεία
     * σχετικά με τα αποτελέσματα μιας κλήρωσης. Τα στατιστικά είναι χωρισμένα
     * ανα εργαστηριακο τμήμα πχ. ΤΝ1, ΤΝ2 κτλ.
     * @param int $lotID Η κλήρωση για την οποία θα συλλεχθούν τα στατιστικά.
     * @param string $courseID Το μάθημα για το οποίο θα συλλεχθούν τα
     * στατιστικά.
     * @return mixed Επιστρέφει τον πίνακα με τα στατιστικα ανα εργαστηριακό
     * τμήμα.
     */
    abstract public function getLabBreakdownTable($lotID, $courseID);

    /**
     * Δημιουργεί και επιστρεφει έναν πίνακα που περιέχει στατιστικά στοιχεία
     * σχετικά με τα αποτελέσματα μιας κλήρωσης. Τα στατιστικά είναι χωρισμένα
     * ανα εργαστηριακο μάθημα πχ. Τεχνητή Νοημοσυνη, Μεταγλωττιστές κτλ.
     * @param int $lotID Η κλήρωση για την οποία θα συλλεχθούν τα στατιστικά.
     * @return mixed Επιστρέφει τον πίνακα με τα στατιστικα ανα εργαστηριακό
     * μάθημα.
     */
    abstract public function getCourseBreakdownTable($lotID);
}

?>
